#!/bin/bash
# jsholat-installer — luci-app-jsholat installer (OpenWrt)
# Menu:
#  1) Install paket pendukung (deps + MP3)
#  2) Install IPK/APK (URL/file | MAIN* | DEV* | Latest Release)
#  3) Uninstall (opkg remove)
#  4) Bersihkan cache LuCI
#  5) Keluar
#
# Catatan:
# - Pillow SELALU via pip; kalau ada python3-pillow dari repo dihapus, lalu pasang pip (retry --force-reinstall).
# - Jika import Pillow masih gagal, fallback ke:
#     python3 -m pip install --ignore-installed --no-deps pillow==<versi>
#   Versi diambil dari $PILLOW_VERSION > versi yang terdeteksi dari $PKGNAME > $PILLOW_PIN_DEFAULT (10.1.0).
# - Untuk pakai Pillow terbaru saja, set PILLOW_ALLOW_LATEST=1 (default 1). Jika 0, langsung pin.
# - MAIN/DEV: direct URL (.apk) → raw; jika gagal, fallback ke GitHub Contents API:
#     MAIN: https://api.github.com/repos/<owner>/<repo>/contents/main?ref=package
#     DEV : https://api.github.com/repos/<owner>/<repo>/contents/dev?ref=package
# - Pemilihan paket UTAMAKAN .ipk (bukan arsitektur), urutan: *_all.ipk > *.ipk > *_all.apk > *.apk (versi terbaru).

set -u
PATH="/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

APP_PKG="luci-app-jsholat"

# ===== Konfigurasi GitHub =====
GH_OWNER="${GH_OWNER:-ajisetiawan716}"
GH_REPO="${GH_REPO:-Jsholat}"            # branch: package; paths: main, dev
GH_REL_OWNER="${GH_REL_OWNER:-$GH_OWNER}"
GH_REL_REPO="${GH_REL_REPO:-$GH_REPO}"

# Pola nama paket (bisa override via env)
IPK_PREFIX="${IPK_PREFIX:-luci-app-jsholat}"
IPK_REGEX="${IPK_REGEX:-luci-app-jsholat.*\.(ipk|apk)$}"

# URL raw data untuk instal manual (file luci + script + data)
GH_DATA="https://raw.githubusercontent.com/ajisetiawan716/luci-app-jsholat/refs/heads/main/data"

# URL langsung (blob GitHub .ipk) — boleh diubah sesuai rilis
MAIN_DIRECT_URL="https://github.com/ajisetiawan716/Jsholat/blob/package/main/luci-app-jsholat-0.1.0-r20250819_all.ipk"
DEV_DIRECT_URL="https://github.com/ajisetiawan716/Jsholat/blob/package/dev/luci-app-jsholat-0.1.0-r20250819_all.ipk"

# Temp
JSHOLAT_TEMP_DIR="/tmp/jsholat"
mkdir -p "$JSHOLAT_TEMP_DIR"
PKG_FILE="$JSHOLAT_TEMP_DIR/jsholat.ipk"   # bisa .ipk/.apk

# (NEW) File bantu untuk opkg update di belakang layar
OPKG_LOG="$JSHOLAT_TEMP_DIR/opkg-update.log"
OPKG_PID_FILE="$JSHOLAT_TEMP_DIR/opkg-update.pid"
OPKG_RC_FILE="$JSHOLAT_TEMP_DIR/opkg-update.rc"
OPKG_LOCK_FILE="$JSHOLAT_TEMP_DIR/opkg.lock"

# ===== Pillow strategy (override via env) =====
# Urutan prioritas versi: $PILLOW_VERSION > parse($PKGNAME) > $PILLOW_PIN_DEFAULT
PILLOW_PIN_DEFAULT="${PILLOW_PIN_DEFAULT:-10.1.0}"
PILLOW_VERSION="${PILLOW_VERSION:-}"         # contoh: 10.1.0
PILLOW_ALLOW_LATEST="${PILLOW_ALLOW_LATEST:-1}"  # 1 = coba latest dulu; 0 = langsung pin

# ===== UI helpers =====
info(){ echo "📦 $*"; }
ok(){ echo "✅ $*"; }
warn(){ echo "⚠️  $*"; }
err(){ echo "❌ $*" >&2; }
is_root(){ [ "$(id -u)" -eq 0 ]; }
has_whiptail(){ command -v whiptail >/dev/null 2>&1; }
has_flock(){ command -v flock >/dev/null 2>&1; }

# ===== Logging =====
VERBOSE="${VERBOSE:-0}"
LOG_FILE="$JSHOLAT_TEMP_DIR/install.log"
log() {
  [ "$VERBOSE" -eq 1 ] && echo "$(date '+%Y-%m-%d %H:%M:%S'): $*" >> "$LOG_FILE"
  return 0
}

# ===== Output consolidation =====
consolidate_output() {
  local title="$1"
  shift
  local command="$*"
  
  if has_whiptail; then
    # Untuk whiptail, tampilkan progress box
    eval "$command" 2>&1 | whiptail --title "$title" --gauge "Sedang berjalan..." 8 78 0
    local status=$?
    if [ $status -eq 0 ]; then
      whiptail --title "Sukses" --msgbox "$title selesai!" 8 78
    else
      whiptail --title "Error" --msgbox "Gagal menjalankan: $title" 8 78
    fi
    return $status
  else
    # Untuk mode teks, tampilkan output biasa dengan emoji
    echo "🚀 Memulai: $title"
    eval "$command"
    local status=$?
    if [ $status -eq 0 ]; then
      echo "✅ $title selesai!"
    else
      echo "❌ Gagal: $title"
    fi
    return $status
  fi
}

# ===== OPKG helpers =====
start_opkg_update_bg(){
  rm -f "$OPKG_LOG" "$OPKG_RC_FILE" "$OPKG_PID_FILE" 2>/dev/null || true
  (
    if has_flock; then
      flock -x 200
    fi
    opkg update >"$OPKG_LOG" 2>&1
    RC=$?
    [ $RC -eq 0 ] && touch /tmp/opkg-lists/.updated
    echo "$RC" >"$OPKG_RC_FILE"
  ) 200>"$OPKG_LOCK_FILE" &
  echo $! >"$OPKG_PID_FILE"
}
show_opkg_progress(){
  [ -f "$OPKG_PID_FILE" ] || return 0
  PID="$(cat "$OPKG_PID_FILE" 2>/dev/null || true)"
  [ -n "$PID" ] && kill -0 "$PID" 2>/dev/null || return 0

  if has_whiptail; then
    (
      P=0
      while kill -0 "$PID" 2>/dev/null; do
        P=$(( (P + 5) % 100 ))
        echo $P
        sleep 0.2
      done
      echo 100
    ) | whiptail --gauge "🔄 Menjalankan 'opkg update' di belakang layar...
📋 Log: $OPKG_LOG" 10 60 0
  else
    sp='|/-\' ; i=0
    printf "🔄 opkg update berjalan "
    while kill -0 "$PID" 2>/dev/null; do
      i=$(( (i+1) % 4 ))
      printf "\r🔄 opkg update berjalan %s" "${sp:$i:1}"
      sleep 0.2
    done
    printf "\r"
  fi

  RC="$(cat "$OPKG_RC_FILE" 2>/dev/null || echo 1)"
  if [ "$RC" = "0" ]; then
    ok "opkg update selesai"
  else
    err "opkg update gagal (rc=$RC) — lihat log: $OPKG_LOG"
    [ -f "$OPKG_LOG" ] && tail -n 20 "$OPKG_LOG" >&2 || true
  fi
}
opkg_update_once(){
  if [ ! -f /tmp/opkg-lists/.updated ]; then
    info "opkg update (background)..."
    start_opkg_update_bg
    show_opkg_progress
  fi
}
pkg_installed(){ opkg list-installed | grep -q "^$1 -"; }
pkg_available(){ opkg list | awk '{print $1}' | grep -q "^$1$"; }
install_pkg(){
  PKG="$1"
  if pkg_installed "$PKG"; then ok "$PKG sudah terpasang"; return 0; fi
  pkg_available "$PKG" || opkg_update_once || true
  if pkg_available "$PKG"; then
    info "pasang $PKG ..."
    opkg install "$PKG" && ok "ok $PKG" || { err "gagal $PKG"; return 1; }
  else
    warn "$PKG tidak ada di repo"
    return 1
  fi
}
remove_pkg_if_installed(){
  PKG="$1"
  if pkg_installed "$PKG"; then
    info "hapus paket repo: $PKG"
    opkg remove "$PKG" --force-depends || warn "gagal remove $PKG"
  fi
}

# ===== HTTP helpers =====
_fetch(){
  URL="$1"; DEST="$2"
  TIMEOUT=30
  if command -v wget >/dev/null 2>&1; then wget -q -T $TIMEOUT -O "$DEST" "$URL"; return $?
  elif command -v uclient-fetch >/dev/null 2>&1; then uclient-fetch -q -T $TIMEOUT -O "$DEST" "$URL"; return $?
  elif command -v curl >/dev/null 2>&1; then curl -fsSL --connect-timeout $TIMEOUT "$URL" -o "$DEST"; return $?
  else err "butuh wget/uclient-fetch/curl"; return 1; fi
}
gh_api_fetch(){
  URL="$1"
  TIMEOUT=30
  if command -v curl >/dev/null 2>&1; then
    curl -fsSL --connect-timeout $TIMEOUT -H "Accept: application/vnd.github+json" -H "User-Agent: curl/7.88" "$URL"
    return $?
  elif command -v wget >/dev/null 2>&1; then
    wget -qO- --timeout=$TIMEOUT --user-agent="curl/7.88" "$URL"
    return $?
  else
    err "butuh curl/wget untuk akses GitHub API"
    return 1
  fi
}
download_if_missing(){
  A="$1"; B="$2"
  case "$A" in
    http://*|https://*) URL="$A"; DEST="$B" ;;
    *) DEST="$A"; URL="$B" ;;
  esac
  if [ -s "$DEST" ]; then ok "$(basename "$DEST") sudah ada"; return 0; fi
  info "Unduh $(basename "$DEST") ..."
  _fetch "$URL" "$DEST" || return 1
  [ -s "$DEST" ] && ok "Terunduh: $(basename "$DEST")" || return 1
}
to_raw_github(){
  URL="$1"
  case "$URL" in
    https://github.com/*/blob/*)
      echo "$URL" | sed -E 's#https://github.com/([^/]+)/([^/]+)/blob/#https://raw.githubusercontent.com/\1/\2/#'
      ;;
    *) echo "$URL" ;;
  esac
}

# ===== Util file/permission =====
strip_crlf(){ [ -f "$1" ] && grep -q $'\r' "$1" && sed -i 's/\r$//' "$1" || true; }
clean_luci_cache(){
  info "bersihkan cache LuCI..."
  rm -f /tmp/luci-indexcache
  rm -f /tmp/luci-modulecache/* 2>/dev/null || true
  ok "cache LuCI bersih"
}
enable_and_start(){
  SVC="$1"
  if [ -x "/etc/init.d/$SVC" ]; then
    /etc/init.d/$SVC enable 2>/dev/null || true
    /etc/init.d/$SVC restart 2>/dev/null || /etc/init.d/$SVC start 2>/dev/null || true
    ok "service $SVC aktif"
  fi
}
sanitize_exec(){ [ -f "$1" ] && strip_crlf "$1" && chmod 755 "$1" 2>/dev/null || true; }
sanitize_data644(){ [ -f "$1" ] && chmod 644 "$1" 2>/dev/null || true; }

# ===== Python & PIL/Pillow =====
pip_has_break_flag(){ command -v pip3 >/dev/null 2>&1 && pip3 --help 2>/dev/null | grep -q -- '--break-system-packages'; }
python_can_import_pillow(){
  command -v python3 >/dev/null 2>&1 || return 1
  python3 - <<'PY'
try:
    from PIL import Image, ImageDraw, ImageFont
except Exception:
    import sys
    sys.exit(1)
print("✅ Test pillow berhasil")
PY
}
pip_install(){
  PKGNAME="$1"
  if python3 -m pip install --no-cache-dir --upgrade "$PKGNAME"; then
    return 0
  fi
  if pip_has_break_flag; then
    warn "pip install $PKGNAME gagal, coba dengan --break-system-packages ..."
    python3 -m pip install --no-cache-dir --upgrade --break-system-packages "$PKGNAME"
  else
    warn "pip install $PKGNAME gagal, coba --force-reinstall ..."
    python3 -m pip install --no-cache-dir --upgrade --force-reinstall "$PKGNAME"
  fi
}
pip_install_ignore_nodeps(){
  PKGNAME="$1"
  if pip_has_break_flag; then
    python3 -m pip install --ignore-installed --no-deps --break-system-packages "$PKGNAME"
  else
    python3 -m pip install --ignore-installed --no-deps "$PKGNAME"
  fi
}
parse_pillow_ver_from_pkgname(){
  [ -n "${PKGNAME:-}" ] || return 1
  VER=$(echo "$PKGNAME" | sed -n 's/.*pillow[-_=]\([0-9][0-9.]*\).*/\1/p' | head -n1)
  [ -n "$VER" ] || return 1
  echo "$VER"
}
resolve_pillow_version(){
  if [ -n "$PILLOW_VERSION" ]; then
    echo "$PILLOW_VERSION"; return 0
  fi
  V=$(parse_pillow_ver_from_pkgname 2>/dev/null || true)
  if [ -n "$V" ]; then echo "$V"; return 0; fi
  echo "$PILLOW_PIN_DEFAULT"
}

# ===== Cleanup Pillow =====
cleanup_pillow(){
  info "Bersihkan semua instalasi Pillow..."
  python3 -m pip uninstall -y pillow || true
  rm -rf /usr/lib/python3.*/site-packages/PIL \
         /usr/lib/python3.*/site-packages/Pillow-*.dist-info \
         /usr/lib/python3.*/site-packages/__pycache__/PIL* \
         2>/dev/null || true
  ok "Cleanup Pillow selesai"
}

pillow_already_works(){
  if python_can_import_pillow; then
    info "Pillow sudah berfungsi dengan baik"
    return 0
  fi
  return 1
}

install_pillow_opkg(){
  info "Fallback: Coba install Pillow via opkg..."
  if install_pkg python3-pillow; then
    if python_can_import_pillow; then
      ok "Pillow berhasil diinstall via opkg"
      return 0
    else
      warn "Pillow terinstall via opkg tapi masih gagal import"
      return 1
    fi
  else
    warn "Tidak bisa install Pillow via opkg"
    return 1
  fi
}

ensure_base_deps(){
  opkg_update_once || true
  install_pkg ca-bundle || warn "ca-bundle gagal"
  install_pkg alsa-utils || warn "alsa-utils gagal"
  install_pkg curl || warn "curl gagal"
  install_pkg jq || warn "jq gagal"
  install_pkg whiptail || warn "whiptail gagal"
  
  if ! install_pkg madplay; then
    warn "madplay tidak tersedia; coba mpg123"
    install_pkg mpg123 || warn "mpg123 juga tidak ada"
  fi
  
  if ! install_pkg luci-lib-json; then
    info "fallback luci-lib-jsonc"
    install_pkg luci-lib-jsonc || warn "luci-lib-json(c) tak ada"
  fi
  
  install_pkg zlib || warn "zlib gagal"
  install_pkg libjpeg-turbo || warn "libjpeg-turbo gagal"
  install_pkg libpng || warn "libpng gagal"
  install_pkg libfreetype || warn "libfreetype gagal"
  install_pkg python3 || { err "python3 gagal"; return 1; }
  pkg_installed python3-pip || install_pkg python3-pip || warn "pip3 tak ada"
  
  return 0
}

ensure_pillow(){
  if pillow_already_works; then
    return 0
  fi
  
  cleanup_pillow
  VER_PIN="$(resolve_pillow_version)"
  info "Strategi Pillow: PILLOW_ALLOW_LATEST=$PILLOW_ALLOW_LATEST, pin=$VER_PIN"

  if [ "${PILLOW_ALLOW_LATEST:-1}" = "1" ]; then
    info "memasang Pillow (latest) via pip ..."
    pip_install pillow || true
    if python_can_import_pillow; then ok "Pillow OK (pip latest)"; return 0; fi
    warn "Import Pillow (latest) masih gagal, lanjut ke pin=$VER_PIN"
  fi

  info "memasang Pillow==$VER_PIN via pip ..."
  pip_install "pillow==$VER_PIN" || true
  if python_can_import_pillow; then ok "Pillow OK (pillow==$VER_PIN)"; return 0; fi
  warn "Import Pillow pin masih gagal, pakai --ignore-installed --no-deps"

  info "fallback keras: python3 -m pip install --ignore-installed --no-deps pillow==$VER_PIN"
  pip_install_ignore_nodeps "pillow==$VER_PIN" || true
  if python_can_import_pillow; then ok "Pillow OK (ignore-installed/no-deps pin)"; return 0; fi

  warn "fallback terakhir: ignore-installed/no-deps (latest)"
  pip_install_ignore_nodeps "pillow" || true
  if python_can_import_pillow; then ok "Pillow OK (ignore-installed/no-deps latest)"; return 0; fi

  if install_pillow_opkg; then
    return 0
  fi

  err "Pillow masih gagal import — cek libjpeg/libpng/freetype/zlib dan wheel kompatibel musl."
  return 1
}

# ===== File pendukung (MP3) =====
install_support_files(){
  mkdir -p /root/jsholat
  download_if_missing "https://raw.githubusercontent.com/${GH_OWNER}/luci-app-jsholat/refs/heads/main/sounds/adzan.mp3"       "/root/jsholat/adzan.mp3"       || true
  download_if_missing "https://raw.githubusercontent.com/${GH_OWNER}/luci-app-jsholat/refs/heads/main/sounds/adzan_subuh.mp3" "/root/jsholat/adzan_subuh.mp3" || true
  download_if_missing "https://raw.githubusercontent.com/${GH_OWNER}/luci-app-jsholat/refs/heads/main/sounds/tarhim.mp3"      "/root/jsholat/tarhim.mp3" || true
  if [ ! -s /root/jsholat/tarhim.mp3 ]; then
    warn "tarhim.mp3 tidak ditemukan, fallback tahrim.mp3"
    download_if_missing "https://raw.githubusercontent.com/${GH_OWNER}/luci-app-jsholat/refs/heads/main/sounds/tahrim.mp3" "/root/jsholat/tarhim.mp3" || true
  fi
  sanitize_data644 /root/jsholat/adzan.mp3
  sanitize_data644 /root/jsholat/adzan_subuh.mp3
  sanitize_data644 /root/jsholat/tarhim.mp3
  ok "file pendukung lengkap"
}

# ===== Consolidated installation functions =====
install_dependencies_consolidated() {
  if has_whiptail; then
    {
      ensure_base_deps
      ensure_pillow || warn "Pillow belum aktif"
      install_support_files
    } 2>&1 | whiptail --title "Install Dependencies" --gauge "Sedang menginstall dependencies..." 8 78 0
    if [ ${PIPESTATUS[0]} -eq 0 ]; then
      whiptail --title "Sukses" --msgbox "✅ Install dependensi & paket pendukung selesai!" 8 78
    else
      whiptail --title "Error" --msgbox "❌ Ada error saat install dependencies" 8 78
    fi
  else
    echo "🚀 Memulai install dependensi & paket pendukung..."
    ensure_base_deps
    ensure_pillow || warn "Pillow belum aktif"
    install_support_files
    echo "✅ Install dependensi & paket pendukung selesai!"
  fi
}

# ===== Sort versi =====
if sort -V </dev/null >/dev/null 2>&1; then SORTV="sort -V"; else SORTV="sort"; fi

# ===== Pilih paket terbaik =====
choose_best_pkg_from_urls() {
  LIST="$JSHOLAT_TEMP_DIR/pkg_urls.txt"
  : > "$LIST"
  cat > "$LIST"

  for PAT in '_all\.ipk$' '\.ipk$' '_all\.apk$' '\.apk$'; do
    SEL="$(grep -E "$PAT" "$LIST" | $SORTV | tail -n1)"
    [ -n "$SEL" ] && echo "$SEL" && return 0
  done
  SEL="$($SORTV "$LIST" | tail -n1)"
  [ -n "$SEL" ] && echo "$SEL"
}

# ===== IPK/APK dari branch =====
fetch_pkg_from_branch(){
  BRANCH="$1"
  SUBPATH="$2"
  API_URL="https://api.github.com/repos/${GH_OWNER}/${GH_REPO}/contents/${SUBPATH}?ref=${BRANCH}"
  info "Query GitHub API: $API_URL"
  J="$(gh_api_fetch "$API_URL" 2>/dev/null)" || return 1

  URLS="$(echo "$J" \
    | grep -o '"download_url":[^,]*' \
    | sed 's/.*"download_url":[[:space:]]*"//; s/"$//' \
    | grep -E '\.(ipk|apk)$' || true)"
  [ -n "$URLS" ] || { err "Tidak ada paket (.ipk/.apk) di ${SUBPATH}@${BRANCH}"; return 1; }

  URLS="$(echo "$URLS" | while read -r u; do
            b="$(basename "$u")"
            echo "$b" | grep -q "^$IPK_PREFIX" || continue
            echo "$b" | grep -Eiq "$IPK_REGEX" || continue
            echo "$u"
         done)"
  [ -n "$URLS" ] || { err "Tidak ada paket cocok pola ($IPK_PREFIX)"; return 1; }

  SEL="$(echo "$URLS" | choose_best_pkg_from_urls)"
  [ -n "$SEL" ] || { err "Gagal memilih paket"; return 1; }

  info "Unduh paket: $(basename "$SEL")"
  rm -f "$PKG_FILE" 2>/dev/null || true
  _fetch "$SEL" "$PKG_FILE" || return 1
  [ -s "$PKG_FILE" ] || return 1
  ok "Paket siap: $PKG_FILE"
}

# ===== Coba URL langsung =====
try_direct_url_install(){
  RAW_URL="$(to_raw_github "$1")"
  info "Coba URL langsung: $RAW_URL"
  rm -f "$PKG_FILE" 2>/dev/null || true
  if _fetch "$RAW_URL" "$PKG_FILE" && [ -s "$PKG_FILE" ]; then
    install_pkg_file "$PKG_FILE"
    return $?
  fi
  return 1
}

# ===== Latest Release =====
install_via_release_latest(){
  API_URL="https://api.github.com/repos/${GH_REL_OWNER}/${GH_REL_REPO}/releases/latest"
  info "Query latest release: $API_URL"
  J="$(gh_api_fetch "$API_URL" 2>/dev/null)" || { err "Gagal akses releases API"; return 1; }

  TAG="$(echo "$J" | grep -o '"tag_name":[[:space:]]*"[^"]*"' | sed 's/.*"tag_name":[[:space:]]*"\([^"]*\)".*/\1/' )"
  [ -n "$TAG" ] && ok "Latest tag: $TAG"

  URLS="$(echo "$J" \
    | grep -o '"browser_download_url":[[:space:]]*"[^"]*\.\(ipk\|apk\)"' \
    | sed 's/.*"browser_download_url":[[:space:]]*"\([^"]*\)".*/\1/' || true)"
  [ -n "$URLS" ] || { err "Release tidak punya asset .ipk/.apk"; return 1; }

  URLS="$(echo "$URLS" | while read -r u; do
            b="$(basename "$u")"
            echo "$b" | grep -q "^$IPK_PREFIX" || continue
            echo "$b" | grep -Eiq "$IPK_REGEX" || continue
            echo "$u"
         done)"
  [ -n "$URLS" ] || { err "Tidak ada paket cocok pola di release"; return 1; }

  SEL="$(echo "$URLS" | choose_best_pkg_from_urls)"
  [ -n "$SEL" ] || { err "Gagal memilih paket dari release"; return 1; }

  info "Unduh asset release: $(basename "$SEL")"
  rm -f "$PKG_FILE" 2>/dev/null || true
  _fetch "$SEL" "$PKG_FILE" || return 1
  [ -s "$PKG_FILE" ] || return 1

  install_pkg_file "$PKG_FILE"
}

# ===== Rollback mechanism =====
install_with_rollback() {
  local temp_backup="$JSHOLAT_TEMP_DIR/backup"
  mkdir -p "$temp_backup"
  
  opkg list-installed > "$temp_backup/installed.before" 2>/dev/null || true
  
  if ! install_pkg_file "$1"; then
    if [ -f "$temp_backup/installed.before" ]; then
      info "Rollback: menghapus paket yang baru terinstall..."
      opkg list-installed | grep -v -f "$temp_backup/installed.before" | xargs opkg remove --autoremove --force-depends 2>/dev/null || true
    fi
    return 1
  fi
  return 0
}

# ===== Pasang paket =====
install_pkg_file(){
  SRC="$1"
  FILE="$SRC"
  case "$SRC" in
    http://*|https://*)
      rm -f "$PKG_FILE" 2>/dev/null || true
      _fetch "$SRC" "$PKG_FILE" || { err "gagal unduh paket"; return 1; }
      FILE="$PKG_FILE"
      ;;
    *)
      FILE="$(realpath "$SRC" 2>/dev/null || echo "$SRC")"
      case "$FILE" in
        /tmp/*|$JSHOLAT_TEMP_DIR/*|./*|/*.ipk|/*.apk)
          [ -s "$FILE" ] || { err "file paket tidak ditemukan: $FILE"; return 1; }
          ;;
        *)
          err "Path file tidak diizinkan: $FILE"
          return 1
          ;;
      esac
      ;;
  esac
  info "Sedang Menginstall $FILE..."
  opkg install "$FILE" || { err "gagal opkg install"; return 1; }
  enable_and_start jsholat
  enable_and_start jadwal
  clean_luci_cache
  ok "instal paket selesai"
}

install_via_main(){
  if try_direct_url_install "$MAIN_DIRECT_URL"; then return 0; fi
  warn "URL langsung MAIN gagal; fallback Contents API"
  fetch_pkg_from_branch "package" "main" && install_with_rollback "$PKG_FILE" || err "tak menemukan paket di MAIN"
}
install_via_dev(){
  if try_direct_url_install "$DEV_DIRECT_URL"; then return 0; fi
  warn "URL langsung DEV gagal; fallback Contents API"
  fetch_pkg_from_branch "package" "dev" && install_with_rollback "$PKG_FILE" || err "tak menemukan paket di DEV"
}

# ===== Uninstall =====
uninstall_any(){
  info "hapus $APP_PKG ..."
  if pkg_installed "$APP_PKG"; then
    info "remove via opkg (auto bersih file paket)"
    opkg remove --autoremove "$APP_PKG" || warn "opkg remove gagal"
  fi
  [ -x /etc/init.d/jsholat ] && /etc/init.d/jsholat stop 2>/dev/null || true
  [ -x /etc/init.d/jadwal ]  && /etc/init.d/jadwal stop 2>/dev/null  || true
  [ -x /etc/init.d/jsholat ] && /etc/init.d/jsholat disable 2>/dev/null || true
  [ -x /etc/init.d/jadwal ]  && /etc/init.d/jadwal disable 2>/dev/null  || true
  
  for f in \
    /etc/config/jsholat \
    /etc/init.d/jsholat /etc/init.d/jadwal \
    /usr/bin/jsholat /usr/bin/jadwal /usr/bin/jadwal2 \
    /usr/share/jsholat/cities.json /usr/share/jsholat/last_updated.txt \
    /root/jsholat/jadwal.txt /root/jsholat/adzan.mp3 /root/jsholat/adzan_subuh.mp3 /root/jsholat/tarhim.mp3
  do
    [ -e "$f" ] && rm -f "$f"
  done
  ok "uninstall selesai"
  clean_luci_cache
}

# ===== Install Driver Soundcard =====
install_soundcard_driver() {
  info "🔄 Install driver soundcard..."
  opkg_update_once || true
  
  # Install tools pendukung
  if ! command -v lsusb >/dev/null 2>&1; then
    info "install usbutils (lsusb)…"
    install_pkg usbutils || warn "usbutils gagal"
  fi

  if ! command -v lspci >/dev/null 2>&1; then
    info "install pciutils (lspci)…"
    install_pkg pciutils || warn "pciutils gagal"
  fi

  # Install driver inti
  install_pkg kmod-sound-core || warn "kmod-sound-core gagal"

  # Deteksi jenis perangkat audio & pasang driver yang sesuai
  if lspci 2>/dev/null | grep -qi "Audio"; then
    info "🔊 PCI audio terdeteksi."
    install_pkg kmod-sound-hda-intel || warn "kmod-sound-hda-intel gagal"
    # Pasang codec umum
    install_pkg kmod-sound-hda-codec-realtek || warn "kmod-sound-hda-codec-realtek gagal"
    install_pkg kmod-sound-hda-codec-via || warn "kmod-sound-hda-codec-via gagal"
    install_pkg kmod-sound-hda-codec-hdmi || warn "kmod-sound-hda-codec-hdmi gagal"
  fi

  if lsusb 2>/dev/null | grep -qi "Audio"; then
    info "🔊 USB audio terdeteksi."
    install_pkg kmod-usb-audio || warn "kmod-usb-audio gagal"
  fi

  # Alat ALSA (aplay, amixer, speaker-test)
  install_pkg alsa-utils || warn "alsa-utils gagal"

  # Beri jeda agar modul termuat
  info "⏳ Tunggu sebentar, modul sound sedang dimuat..."
  sleep 3

  # Pilih device playback
  if ! command -v aplay >/dev/null 2>&1; then
    warn "aplay tidak tersedia, lewat konfigurasi device"
    return 1
  fi

  LIST="$(aplay -l 2>/dev/null | grep -i 'card [0-9].*device [0-9]' 2>/dev/null || true)"
  
  if [ -z "$LIST" ]; then
    warn "❌ Tidak ada device audio yang terdeteksi"
    warn "   Pastikan sound card terpasang dan driver terinstall dengan benar"
    return 1
  fi

  # 1) Prioritas: non-HDMI & mengandung Analog/Headphone/Speaker
  PICK="$(printf '%s\n' "$LIST" \
    | grep -viE 'HDMI|DP|S/PDIF|SPDIF|Digital' \
    | grep -iE 'Analog|Headphone|Speaker' \
    | sed -n 's/^card \([0-9][0-9]*\): \([^ ]\+\) .* device \([0-9][0-9]*\):.*/\2 \1 \3/p' \
    | head -n1)"

  # 2) Kalau masih kosong: tetap non-HDMI pertama (apa pun namanya)
  if [ -z "$PICK" ]; then
    PICK="$(printf '%s\n' "$LIST" \
      | grep -viE 'HDMI|DP|S/PDIF|SPDIF|Digital' \
      | sed -n 's/^card \([0-9][0-9]*\): \([^ ]\+\) .* device \([0-9][0-9]*\):.*/\2 \1 \3/p' \
      | head -n1)"
  fi

  # 3) Kalau tetap kosong: berarti cuma ada HDMI
  if [ -z "$PICK" ]; then
    warn "⚠️  Hanya device HDMI yang terdeteksi"
    warn "   Tidak menulis /etc/asound.conf untuk mencegah salah output"
    warn "   Solusi: colok USB sound card atau aktifkan jack analog di BIOS"
    return 0
  fi

  # Pecah jadi: CARDNAME CARDNUM DEVNUM
  set -- $PICK
  CARDNAME="$1"
  CARDNUM="$2"
  DEVNUM="$3"

  info "🎯 Pilihan device: $CARDNAME (card=$CARDNUM, device=$DEVNUM)"

  # Tulis /etc/asound.conf
  cat > /etc/asound.conf <<EOF_ASOUND
# Auto-generated by jsholat-installer
# Default diarahkan ke non-HDMI; gunakan nama card agar stabil.
pcm.dmixer {
    type dmix
    ipc_key 1024
    slave {
        pcm "hw:CARD=${CARDNAME},DEV=${DEVNUM}"
        rate 44100
    }
}

pcm.dsnooped {
    type dsnoop
    ipc_key 2048
    slave {
        pcm "hw:CARD=${CARDNAME},DEV=${DEVNUM}"
        rate 44100
    }
}

pcm.duplex {
    type asym
    playback.pcm "dmixed"
    capture.pcm  "dsnooped"
}

pcm.!default {
    type plug
    slave.pcm "dmixer"
}

ctl.!default {
    type hw
    card ${CARDNUM}
}
EOF_ASOUND

  info "📝 /etc/asound.conf dibuat -> hw:CARD=${CARDNAME},DEV=${DEVNUM}"

  # Unmute & set volume (jika kontrol tersedia)
  if command -v amixer >/dev/null 2>&1; then
    info "🔊 Set volume ke 80% dan unmute..."
    amixer -c "$CARDNUM" set Master 80% unmute >/dev/null 2>&1 || true
    amixer -c "$CARDNUM" set PCM 80% unmute >/dev/null 2>&1 || true
  fi

  # Tes singkat
  info "🔊 Tes suara..."
  if command -v speaker-test >/dev/null 2>&1; then
    speaker-test -D default -t sine -f 1000 -l 1 >/dev/null 2>&1 || true
  fi

  ok "✅ Install driver soundcard selesai"
  info "   Default diarahkan ke non-HDMI (Analog/Headphone/Speaker)"
  info "   Override manual: edit /etc/asound.conf"
}

# ===== Menu =====
menu(){
  echo " ==========================================="
  echo "           🕌 JSHOLAT INSTALLER 🕌          "
  echo " ==========================================="
  echo " 1) 📦 Install paket pendukung (deps + MP3)"
  echo " 2) 🔊 Install driver soundcard"
  echo " 3) 📥 Install IPK/APK"
  echo "    a) 🌐 Paket dari URL/file"
  echo "    b) 📦 Paket dari MAIN*"
  echo "    c) 🔧 Paket dari DEV*"
  echo "    d) 🚀 Paket dari Latest Release (GitHub) - Recommended"
  echo " 4) 🗑️  Uninstall (opkg remove)"
  echo " 5) 🧹 Bersihkan cache LuCI"
  echo " 6) ❌ Keluar"
  echo " ==========================================="
  printf "Pilih: "
}

# ===== Main =====
is_root || { err "jalankan sebagai root"; exit 1; }

while true; do
  if has_whiptail; then
    choice=$(whiptail --title "🕌 JSHOLAT INSTALLER" --menu "Pilih aksi:" 22 78 12 \
      "1" "📦 Install paket pendukung (deps + MP3)" \
      "2" "🔊 Install driver soundcard" \
      "3" "📥 Install IPK/APK" \
      "4" "🗑️  Uninstall (opkg remove)" \
      "5" "🧹 Bersihkan cache LuCI" \
      "6" "❌ Keluar" \
      3>&1 1>&2 2>&3)
    [ $? -ne 0 ] && choice=7
  else
    menu
    read -r choice
  fi

  case "${choice:-}" in
    1)
      install_dependencies_consolidated
      ;;
    2)
      install_soundcard_driver
      ;;
    3)
      ensure_base_deps
      ensure_pillow || warn "Pillow belum aktif"
      if has_whiptail; then
        sub=$(whiptail --title "Install IPK/APK" --menu "Sumber paket:" 16 72 8 \
          "a" "🌐 Paket dari URL/file" \
          "b" "📦 Paket dari MAIN*" \
          "c" "🔧 Paket dari DEV*" \
          "d" "🚀 Paket dari Latest Release (GitHub) - Recommended" \
          3>&1 1>&2 2>&3)
      else
        printf "   Pilih (a/b/c/d): "; read -r sub
      fi
      case "$sub" in
        a|A)
          if has_whiptail; then
            SRC=$(whiptail --inputbox "Masukkan URL/path paket (.ipk/.apk):" 10 78 "" 3>&1 1>&2 2>&3)
            [ $? -ne 0 ] && SRC=""
          else
            printf "Masukkan URL/path paket (.ipk/.apk): "; read -r SRC
          fi
          [ -n "${SRC:-}" ] && install_with_rollback "$SRC" || warn "kosong"
          ;;
        b|B) install_via_main ;;
        c|C) install_via_dev  ;;
        d|D) install_via_release_latest ;;
        *) [ -n "${sub:-}" ] || true ;;
      esac
      ;;
    4) 
      if has_whiptail; then
        whiptail --yesno "Yakin ingin uninstall?" 8 78 && uninstall_any
      else
        uninstall_any
      fi
      ;;
    5) 
      clean_luci_cache
      if has_whiptail; then
        whiptail --msgbox "🧹 Cache LuCI dibersihkan!" 8 78
      fi
      ;;
    6) 
      if has_whiptail; then
        whiptail --msgbox "👋 Terimakasih.. :)" 8 78
      else
        echo "👋 Terimakasih.. :)"
      fi
      exit 0 
      ;;
    *) 
      if has_whiptail; then
        whiptail --msgbox "❌ Pilihan tidak valid" 8 78
      else
        warn "pilihan tidak valid"
      fi
      ;;
  esac
done