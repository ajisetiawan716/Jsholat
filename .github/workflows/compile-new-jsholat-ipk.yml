name: Compile The New Version JSholat

on:
  push:
    branches: [ dev ]
    paths: [ 'luci-app-jsholat/Makefile' ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      current_version: ${{ steps.current_version.outputs.version }}
    steps:
      - name: Checkout dev
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Read PKG_VERSION from Makefile
        id: version
        shell: bash
        run: |
          V=$(grep 'PKG_VERSION:=' ./luci-app-jsholat/Makefile | awk -F '=' '{gsub(/[ \t]/,"",$2); print $2}')
          echo "version=$V" >> "$GITHUB_OUTPUT"
          echo "New Version: $V"

      - name: Checkout package branch
        uses: actions/checkout@v4
        with:
          ref: package

      - name: Read current version from package/<branch>/version
        id: current_version
        shell: bash
        run: |
          if [ -f "./${{ github.ref_name }}/version" ]; then
            CV=$(sed -n '1p' "./${{ github.ref_name }}/version" | awk -F 'v' '{print $2}')
          else
            CV=0
          fi
          echo "version=$CV" >> "$GITHUB_OUTPUT"
          echo "Current Version: $CV"

  compile:
    runs-on: ubuntu-latest
    needs: get_version
    if: ${{ needs.get_version.outputs.version != needs.get_version.outputs.current_version }}
    env:
      PKG_NAME: luci-app-jsholat
      SDK_IPK_URL: https://downloads.openwrt.org/releases/22.03.3/targets/x86/64/openwrt-sdk-22.03.3-x86-64_gcc-11.2.0_musl.Linux-x86_64.tar.xz
      SDK_APK_URL: AUTO
    steps:
      - name: Checkout dev (source)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Install prerequisites
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get -y install git curl wget ca-certificates xz-utils zstd tar build-essential \
                                  python3 rsync file

      - name: Normalize PKG_RELEASE (must be numeric for APK)
        shell: bash
        run: |
          set -e
          REL=$(grep 'PKG_RELEASE:=' luci-app-jsholat/Makefile | awk -F '=' '{gsub(/[ \t]/,"",$2); print $2}')
          if ! [[ "$REL" =~ ^[0-9]+$ ]]; then
            echo "PKG_RELEASE non-numeric ($REL) -> set to 1"
            sed -E -i 's/^(PKG_RELEASE:=).*/\1 1/' luci-app-jsholat/Makefile
          fi

      - name: Resolve SDK URLs (stable & snapshot)
        id: urls
        shell: bash
        run: |
          set -euo pipefail
          IPK_URL="${SDK_IPK_URL}"
          curl -fsSLI "$IPK_URL" >/dev/null
          echo "ipk_url=$IPK_URL" >> "$GITHUB_OUTPUT"
          if [ "${SDK_APK_URL}" = "AUTO" ]; then
            SNAPSHOT_DIR="https://downloads.openwrt.org/snapshots/targets/x86/64/"
            APK_FILE=$(curl -fsSL "$SNAPSHOT_DIR" | grep -oE 'openwrt-sdk-x86-64_[^"]+\.tar\.zst' | head -n1)
            [ -n "$APK_FILE" ] || { echo "Cannot resolve snapshot SDK"; exit 1; }
            APK_URL="$SNAPSHOT_DIR$APK_FILE"
          else
            APK_URL="${SDK_APK_URL}"
          fi
          curl -fsSLI "$APK_URL" >/dev/null
          echo "apk_url=$APK_URL" >> "$GITHUB_OUTPUT"

      - name: Prep dirs (outside repo)
        run: |
          echo "TMPDIR=$GITHUB_WORKSPACE/../tmp"  >> "$GITHUB_ENV"
          echo "OUTDIR=$GITHUB_WORKSPACE/../_out" >> "$GITHUB_ENV"
          mkdir -p "$GITHUB_WORKSPACE/../tmp" "$GITHUB_WORKSPACE/../_out"

        - name: Download & extract SDK (IPK / stable)
          shell: bash
          run: |
            set -euo pipefail
            cd "$TMPDIR"

            URL="${{ steps.urls.outputs.ipk_url }}"
            FN="$(basename "$URL")"
            echo "Downloading (IPK): $URL"
            wget -q -O "$FN" "$URL"

            case "$FN" in
              *.tar.zst|*.zst)    tar --zstd -xf "$FN" ;;
              *.tar.xz|*.xz)      tar -xJf "$FN" ;;
              *.tar.gz|*.tgz)     tar -xzf "$FN" ;;
              *.tar.bz2|*.tbz2)   tar -xjf "$FN" ;;
              *.tar)              tar -xf  "$FN" ;;
              *) echo "Unknown archive format: $FN" >&2; exit 2 ;;
            esac

            SDKDIR="$(find . -maxdepth 1 -type d -name 'openwrt-sdk-*' | head -n1)"
            [ -n "$SDKDIR" ] || { echo "SDK dir not found after extract"; ls -la; exit 3; }
            mv "$SDKDIR" SDK_IPK


      - name: Download & extract SDK (APK / snapshot)
        run: |
          set -eux
          cd "$TMPDIR"
          wget -q "${{ steps.urls.outputs.apk_url }}" -O SDK_APK.tar.zst
          tar --zstd -xf SDK_APK.tar.zst
          mv openwrt-sdk-* SDK_APK

      # Minimal feeds: hanya luci, TANPA feeds install -a
      - name: Prepare minimal feeds & link package (IPK)
        run: |
          set -eux
          cd "$TMPDIR/SDK_IPK"
          ./scripts/feeds update luci
          rm -rf package/$PKG_NAME
          ln -s "$GITHUB_WORKSPACE/$PKG_NAME" "package/$PKG_NAME"
          make defconfig

      - name: Build (IPK / stable) - only this package
        run: |
          set -eux
          cd "$TMPDIR/SDK_IPK"
          make package/$PKG_NAME/compile LUCI_LANGUAGES="en id" -j$(nproc) V=sc

      - name: Prepare minimal feeds & link package (APK)
        run: |
          set -eux
          cd "$TMPDIR/SDK_APK"
          ./scripts/feeds update luci
          rm -rf package/$PKG_NAME
          ln -s "$GITHUB_WORKSPACE/$PKG_NAME" "package/$PKG_NAME"
          make defconfig

      - name: Build (APK / snapshot) - only this package
        run: |
          set -eux
          cd "$TMPDIR/SDK_APK"
          make package/$PKG_NAME/compile LUCI_LANGUAGES="en id" -j$(nproc) V=sc

      - name: Collect artifacts (.ipk & .apk) - only luci-app-jsholat
        id: collect
        run: |
          set -eux
          find "$TMPDIR/SDK_IPK/bin" -type f -name "luci-app-jsholat_*.ipk" -exec cp -v {} "$OUTDIR"/ \; || true
          find "$TMPDIR/SDK_APK/bin" -type f -name "luci-app-jsholat-*.apk" -exec cp -v {} "$OUTDIR"/ \; || true
          ls -lh "$OUTDIR" || true
          echo "count=$(ls -1 "$OUTDIR"/* 2>/dev/null | wc -l || true)" >> "$GITHUB_OUTPUT"

      - name: Assert artifacts exist
        run: |
          test -d "$OUTDIR" || { echo "No OUTDIR"; exit 1; }
          ls "$OUTDIR"/luci-app-jsholat_*.ipk "$OUTDIR"/luci-app-jsholat-*.apk 2>/dev/null || { echo "No luci-app-jsholat ipk/apk found"; exit 1; }

      - name: Create GitHub Release (upload .ipk & .apk)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get_version.outputs.version }}
          name: v${{ needs.get_version.outputs.version }}
          files: |
            ${{ env.OUTDIR }}/luci-app-jsholat_*.ipk
            ${{ env.OUTDIR }}/luci-app-jsholat-*.apk
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Switch to package branch
        uses: actions/checkout@v4
        with:
          ref: package
          clean: true   # aman, OUTDIR di luar repo

      - name: Publish artifacts to package/dev and package/main
        run: |
          set -eux
          for DEST in dev main; do
            mkdir -p "./$DEST"
            rm -f "./$DEST/${{ env.PKG_NAME }}*.ipk" "./$DEST/${{ env.PKG_NAME }}*.apk" || true
            echo "v${{ needs.get_version.outputs.version }}" > "./$DEST/version"
            echo "https://img.shields.io/badge/New Release-v${{ needs.get_version.outputs.version }}-orange.svg" >> "./$DEST/version"
            cp -v "$OUTDIR"/luci-app-jsholat_*.ipk "./$DEST/" 2>/dev/null || true
            cp -v "$OUTDIR"/luci-app-jsholat-*.apk "./$DEST/" 2>/dev/null || true
          done

          git config user.name  'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "Auto Package Update: v${{ needs.get_version.outputs.version }}" || echo "No changes"
          git push

      - name: Cleanup OUTDIR
        if: always()
        run: |
          rm -rf "$OUTDIR" || true
